package me.Kruithne.KruGeneration;

public class CrossRoads
{
	public byte GetByte(int x, int y, int z)
	{
		return byteMap[blockData[x*16 + z + y*256]];
	}

	private byte[] byteMap = { 
		Blocks.AIR, // 0
		Blocks.DIRT, // 1
		Blocks.STONE, // 2
		Blocks.WATER, // 3
		Blocks.GLOWSTONE, // 4
		Blocks.LOG, // 5
		Blocks.STEP, // 6
		Blocks.GRASS, // 7
		Blocks.LEAVES, // 8
		Blocks.FENCE, // 9
		Blocks.TORCH, //10
		Blocks.DOUBLESTEP // 11
	};
	private int[] blockData = {
		1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,
		1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,
		1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,
		1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,
		1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,
		1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,
		2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
		1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,
		1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,
		1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,
									    
		1,1,1,1,1,1,2,3,2,2,2,3,2,1,1,1,
		1,1,1,1,1,1,2,3,2,2,2,3,2,1,1,1,
		1,1,1,1,1,1,2,3,2,2,2,3,2,1,1,1,
		1,1,1,1,1,1,2,3,2,2,2,3,2,1,1,1,
		1,1,1,1,1,1,2,3,2,2,2,3,2,1,1,1,
		1,1,1,1,1,1,2,3,2,2,2,3,2,1,1,1,
		2,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,
		3,3,3,3,3,3,3,3,2,2,2,3,3,3,3,3,
		2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
		3,3,3,3,3,3,3,3,2,2,2,3,3,3,3,3,
		2,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,
		1,1,1,1,1,1,2,3,2,2,2,3,2,1,1,1,
		1,1,1,1,1,1,2,3,2,2,2,3,2,1,1,1,
		1,1,1,1,1,1,2,3,2,2,2,3,2,1,1,1,
		      						    
		7,7,7,7,7,5,2,0,6,6,6,0,2,5,7,7,
		7,7,7,7,7,5,2,0,6,6,6,0,2,5,7,7,
		7,7,7,7,7,5,2,0,6,6,6,0,2,5,7,7,
		7,7,7,7,7,5,2,0,6,6,6,0,2,5,7,7,
		7,7,7,7,7,5,2,0,6,6,6,0,2,5,7,7,
		5,5,5,5,5,5,2,0,6,6,6,0,2,5,5,5,
		2,2,2,2,2,2,4,0,6,6,6,0,4,2,2,2,
		0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,
		6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
		6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
		6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
		0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,
		2,2,2,2,2,2,4,0,6,6,6,0,4,2,2,2,
		5,5,5,5,5,5,2,0,6,6,6,0,2,5,5,5,
		7,7,7,7,7,5,2,0,6,6,6,0,2,5,7,7,
		7,7,7,7,7,5,2,0,6,6,6,0,2,5,7,7,
		         					    
		0,0,0,0,0,8,6,6,0,0,0,6,6,8,0,0,
		0,0,0,0,0,8,6,6,0,0,0,6,6,8,0,0,
		0,0,0,0,0,8,6,6,0,0,0,6,6,8,0,0,
		0,0,0,0,0,8,6,6,0,0,0,6,6,8,0,0,
		0,0,0,0,5,8,6,6,0,0,0,6,6,8,8,0,
		8,8,8,8,8,8,6,6,0,0,0,6,6,8,8,8,
		6,6,6,6,6,6,6,6,0,0,0,6,6,6,6,6,
		6,6,6,6,6,6,6,11,0,0,0,11,6,6,6,6,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		6,6,6,6,6,6,6,11,0,0,0,11,6,6,6,6,
		6,6,6,6,6,6,6,6,0,0,0,6,6,6,6,6,
		8,8,8,8,8,8,6,6,0,0,0,6,6,8,8,8,
		0,0,0,0,6,8,6,6,0,0,0,6,6,8,7,0,
		0,0,0,0,0,8,6,6,0,0,0,6,6,8,0,0,
		         					    
		0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,
		0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,
		0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,
		0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,
		0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,
		8,8,8,8,8,8,0,0,0,0,0,0,0,8,8,8,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		8,8,8,8,8,8,0,0,0,0,0,0,0,8,8,8,
		0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,
		0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,
		         					    
		         					    
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,10,0,0,0,10,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,10,0,0,0,10,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};
}